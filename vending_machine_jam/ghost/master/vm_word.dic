//---------------------------Envelopes--------------------------


possibleitemsfood
{
	"Wacky Wafers"
	"Munchy Bloomers"
	"Prawn Crackers"
	"Mixed Nuts"
	"Green Devils"
	"Assorted Dried Fruits"
	"Flaming Hot Sunrise"
	"Blueberry Buzzers"
	"Almond Fluffs"
	"Forest Crunch"
	"Apple Arrows"
	"Lemonade Joy"
	"Cheeky Chuckler"
	"Green Apple Jabbers"
}

possibleitemsdrink
{
	"Red Hot Dream"
	"Temperature Tantrum"
	"Tropical Thrill"
	"Cream 'n' Coconut"
	"Razzberry Whip"
	"Vanilla Blast"
	"Cherry Surge"
	"Grape Tornado"
	"Golden Guzzler"
	"Blueberry Bash"
}

exampleenvelope
{
	"Example Envelope Dialogue 1"
	"Example Envelope Dialogue 2"
	"Example Envelope Dialogue 3"
}


internalenvelope
{
	"Internal Envelope Dialogue 1 - %(exampleenvelope)"
	"%(username)'s computer"
	"Here is a blanklist object - %(blanklist)."
}


		//*********************Advanced User Info*******************************
	  //One particularly useful thing you can do is add value changes to an envelope, if your dialogue is in a place where it's not easy to add the change directly. For example...
	  
	  //FeelingsGoUp
	  //{
	  //Feelings += 1
	  //"Thank you, %(username), that was really nice of you.\e"
	  //}
	  
	  //So this would display the dialogue as well as change the value. Then you can call this in dialogue if you need to to change the value without having to do a bunch of fiddly business. You can change multiple values at once, and if you don't put dialogue in there, it will change the value invisibly.
	  
	  //Another use for these envelopes is to shortcut certain long lines of SakuraScript you don't want to have to keep typing.

	//Another way to use envelopes is to store multiple poses for SurfaceRestore in aitalk.dic. This can be an easy way to vary certain poses without having to manually put them in one at a time, and have some variety when your ghost goes back to its neutral pose in SurfaceRestore.
		
	  //***********************************************************************


usersfolder
{
	"%(username)'s Recycle Bin"
	"%(username)'s Document folder"
	"%(username)'s secret folder"
}


//I've called it a double envelope at times, but this is actually technically an array. Note that it has a word, a comma, then another word. This is essentially a list being stored in this envelope. You can call one of the values by using brackets around the number of the list entry. So, the first value (the Korean word) would be %(lessonkor[0]) since all arrays start at 0. The second value (the definition) would be %(lessonkor[1]). If you have a longer array, like "word,word,word,word,word", you can keep calling values by changing the numbers, like %(lessonkor[5]) or %(lessonkor[10]). An example of pulling information from this array can be seen in aitalk.dic.

lessonkor
{
	"사과(sa-gua),apple"
	"노동(no-dong),labor"
	"손가락(son-ga-rak),finger"
	"마르크스(ma-r-k-s),Marx"
	"자본주의(ja-bon-ju-yi),capitalism"
}

//You can also format your envelopes like this as one line separated by semicolons.
blanklistparagraph
{
	"List paragraph 1"; "List paragraph 2"; "List paragraph 3"; "List paragraph 4"; "List paragraph 5";
}


 //**** Don't touch this ***************************************************************
 //This is code stuff and nothing for you to worry about, just save the .dic and move on! You're done!
 
 On_\person
{
 	person
}
